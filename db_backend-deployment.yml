apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-backend-deployment
  labels:
    app: db-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-backend
  template:
    metadata:
      labels:
        app: db-backend
    spec:
      volumes:
        - name: db-backend-persistent-storage
          persistentVolumeClaim:
            claimName: db-backend-pvc
        - name: db-backend-init-script
          configMap:
            name: db-backend-init-script-config
            items:
              - key: init.sql
                path: init.sql
      containers:
        - name: db-backend
          image: postgres:17
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_DB
              value: customer_registration
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: db-backend-persistent-storage
              mountPath: /var/lib/postgresql/data
            - name: db-backend-init-script
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U postgres -d customer_registration"]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U postgres -d customer_registration"]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
