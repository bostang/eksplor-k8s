apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-backend-deployment
  labels:
    app: db-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-backend
  template:
    metadata:
      labels:
        app: db-backend
    spec:
      volumes:
        - name: db-backend-persistent-storage
          persistentVolumeClaim:
            claimName: db-backend-pvc
        - name: db-backend-init-script
          configMap:
            name: db-backend-init-script-config
            items:
              - key: init.sql
                path: init.sql
      initContainers: # <-- INITCONTAINER BARU DITAMBAHKAN
        - name: clean-postgres-data
          image: busybox:latest
          command: ["sh", "-c", "rm -rf /var/lib/postgresql/data/* && mkdir -p /var/lib/postgresql/data && chown -R 999:999 /var/lib/postgresql/data"]
          volumeMounts:
            - name: db-backend-persistent-storage
              mountPath: /var/lib/postgresql/data
      containers:
        - name: db-backend
          image: postgres:17
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_DB
              value: customer_registration
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: db-backend-persistent-storage
              mountPath: /var/lib/postgresql/data
            - name: db-backend-init-script
              mountPath: /docker-entrypoint-initdb.d
          # OVERRIDE DEFAULT ENTRYPOINT COMMAND UNTUK MEMAKSA EKSEKUSI init.sql # <-- PERUBAHAN DI SINI
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Jalankan skrip entrypoint default PostgreSQL terlebih dahulu di background
              /usr/local/bin/docker-entrypoint.sh postgres &
              # Tunggu hingga PostgreSQL siap menerima koneksi
              until pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}; do
                echo "Menunggu PostgreSQL siap..."
                sleep 2
              done
              echo "PostgreSQL sudah siap. Mengeksekusi init.sql..."
              # Eksekusi skrip init.sql secara eksplisit
              psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /docker-entrypoint-initdb.d/init.sql
              echo "Eksekusi init.sql selesai."
              # Biarkan kontainer tetap berjalan (penting agar deployment tidak mati)
              wait
          livenessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U postgres -d customer_registration"]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U postgres -d customer_registration"]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5